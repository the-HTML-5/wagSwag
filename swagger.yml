openapi: 3.0.2
info:
  title: Web App Gallery
  version: '1.0'
servers:
  - url: 'http://localhost:3000'
paths:
  '/api/me/reviews':
    get:
      security:
        - cookieAuth: []
      description: return list of users reviews
      tags:
        - review
        - user
      responses:
        '200':
          $ref: '#/components/responses/UserReviewsResponse'
        '400':
          $ref: '#/components/responses/StandardError'
        '401':
          $ref: '#/components/responses/StandardError'
  '/api/review/{id}':
    delete:
      description: remove user review
      tags:
        - review
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/ReviewID'
      responses:
        '200':
          $ref: '#/components/responses/SuccessMessageReturn'
        '400':
          $ref: '#/components/responses/StandardError'
        '401':
          $ref: '#/components/responses/StandardError'
    put:
      description: Update user review
      tags:
        - review
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/ReviewID'
      requestBody:
        $ref: '#/components/requestBodies/NewReviewBody'
      responses:
        '201':
          $ref: '#/components/responses/NewReviewResponse'
        '400':
          $ref: '#/components/responses/StandardError'
        '401':
          $ref: '#/components/responses/StandardError'
  '/api/webapp/{id}/reviews':
    post:
      description: add review to a web application
      tags:
        - webapp
        - review
      security:
        - cookieAuth: []
      parameters:
        - $ref: '#/components/parameters/AppID'
      requestBody:
        $ref: '#/components/requestBodies/NewReviewBody'
      responses:
        '201':
          $ref: '#/components/responses/NewReviewResponse'
        '400':
          $ref: '#/components/responses/StandardError'
        '401':
          $ref: '#/components/responses/StandardError'
  /api/me/updatePassword:
    put:
      tags:
        - user
      description: change users current password
      security:
        - cookieAuth: []
      responses:
        '201':
          $ref: '#/components/responses/SuccessMessageReturn'
        '400':
          $ref: '#/components/responses/StandardError'
        '401':
          $ref: '#/components/responses/StandardError'
  /api/me/destroy:
    delete:
      tags:
        - user
      description: delete user account
      security:
        - cookieAuth: []
      responses:
        '200':
          $ref: '#/components/responses/SuccessMessageReturn'
        '400':
          $ref: '#/components/responses/StandardError'
        '401':
          $ref: '#/components/responses/StandardError'
  /api/me:
    put:
      description: update user account
      tags:
        - user
      security:
        - cookieAuth: []
      requestBody:
        $ref: '#/components/requestBodies/UpdateUserBody'
      responses:
        '201':
          $ref: '#/components/responses/UserInfoResponse'
        '400':
          $ref: '#/components/responses/StandardError'
        '401':
          $ref: '#/components/responses/StandardError'
    get:
      security:
        - cookieAuth: []
      description: get logged in users information
      tags:
        - user
      responses:
        '200':
          $ref: '#/components/responses/UserInfoResponse'
        '401':
          $ref: '#/components/responses/StandardError'
  /api/logout:
    post:
      security:
        - cookieAuth: []
      tags:
        - auth
      description: logout user
      requestBody:
        required: true
        content:
          application/json:
            schema: {}
      responses:
        '200':
          description: authenticated and session removed
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: ok
                  message:
                    type: string
                    example: successfully logged out
        '401':
          $ref: '#/components/responses/StandardError'
  /api/login:
    post:
      security: []
      tags:
        - auth
      description: login user
      requestBody:
        $ref: '#/components/requestBodies/LoginCredentials'
      responses:
        '200':
          description: credentials verified and user session created
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: ok
                  data:
                    $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/StandardError'
  /api/signup:
    post:
      security: []
      tags:
        - auth
      description: create new user account
      requestBody:
        $ref: '#/components/requestBodies/NewUserBody'
      responses:
        '201':
          description: information validated and account created
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: ok
                  data:
                    $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/StandardError'
  /api/webapp:
    get:
      tags:
        - webapp
      description: get paginated list of web applications
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/search'
        - $ref: '#/components/parameters/category'
      responses:
        '200':
          $ref: '#/components/responses/WebAppsReturn'
        '400':
          $ref: '#/components/responses/StandardError'
    post:
      security:
        - cookieAuth: []
      tags:
        - webapp
      description: data validated and new web application document created
      requestBody:
        $ref: '#/components/requestBodies/NewWebAppBody'
      responses:
        '201':
          $ref: '#/components/responses/WebAppReturn'
        '400':
          $ref: '#/components/responses/StandardError'
        '401':
          $ref: '#/components/responses/StandardError'
  '/api/webapp/{id}':
    get:
      security: []
      tags:
        - webapp
      description: view single web application
      parameters:
        - $ref: '#/components/parameters/AppID'
      responses:
        '200':
          $ref: '#/components/responses/WebAppReturn'
        '400':
          $ref: '#/components/responses/StandardError'
components:
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: token
  schemas:
    User:
      properties:
        _id:
          type: string
          example: 5d6ede6a0ba62570afcedd3a
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: Doe
        email:
          type: string
          example: johndoe@example.com
        createdAt:
          type: string
          format: date
          example: '2021-03-29T18:44:53.030Z'
        updatedAt:
          type: string
          format: date
          example: '2021-03-29T18:44:53.030Z'
    SanitizedUser:
      properties:
        _id:
          type: string
          example: 5d6ede6a0ba62570afcedd3a
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: Doe
    WebApp:
      properties:
        _id:
          type: string
          example: 5d6ede6a0ba62570afcedd3a
        manifestURL:
          type: string
          example: 'https://news.google.com/_/DotsSplashUi/manifest.json'
        startURL:
          type: string
          example: /?lfhs=2
        name:
          type: string
          example: Google News
        description:
          type: string
        appleWebAppCapable:
          type: boolean
          example: true
        backgroundColor:
          type: string
          example: white
        themeColor:
          type: string
          example: white
        category:
          type: string
          example: news
        submittedBy:
          $ref: '#/components/schemas/User'
        reviews:
          type: array
          items:
            $ref: '#/components/schemas/Review'
        averageRating:
          type: integer
          minimum: 5
          example: 3.5
        icons:
          type: array
          items:
            properties:
              src:
                type: string
                example: //ssl.gstatic.com/gnews/logo/google_news_192.png
              sizes:
                type: string
                example: 1024x1024
        createdAt:
          type: string
          format: date
          example: '2021-03-29T18:44:53.030Z'
        updatedAt:
          type: string
          format: date
          example: '2021-03-29T18:44:53.030Z'
    WebApps:
      properties:
        _id:
          type: string
          example: 5d6ede6a0ba62570afcedd3a
        manifestURL:
          type: string
          example: 'https://news.google.com/_/DotsSplashUi/manifest.json'
        startURL:
          type: string
          example: /?lfhs=2
        name:
          type: string
          example: Google News
        description:
          type: string
        appleWebAppCapable:
          type: boolean
          example: true
        backgroundColor:
          type: string
          example: white
        themeColor:
          type: string
          example: white
        category:
          type: string
          example: news
        submittedBy:
          $ref: '#/components/schemas/SanitizedUser'
        averageRating:
          type: integer
          minimum: 5
          example: 3.5
        icons:
          type: array
          items:
            properties:
              src:
                type: string
                example: //ssl.gstatic.com/gnews/logo/google_news_192.png
              sizes:
                type: string
                example: 1024x1024
        createdAt:
          type: string
          format: date
          example: '2021-03-29T18:44:53.030Z'
        updatedAt:
          type: string
          format: date
          example: '2021-03-29T18:44:53.030Z'
    Review:
      properties:
        _id:
          type: string
        rating:
          type: integer
          example: 4
        review:
          type: string
          example: This is awesome
        user:
          $ref: '#/components/schemas/SanitizedUser'
        webapp:
          $ref: '#/components/schemas/WebApp'
        createdAt:
          type: string
          format: date
          example: '2021-03-29T18:44:53.030Z'
        updatedAt:
          type: string
          format: date
          example: '2021-03-29T18:44:53.030Z'
  responses:
    UserReviewsResponse:
      description: return list of current users reviews
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: string
                example: ok
              data:
                type: array
                items:
                  $ref: '#/components/schemas/Review'
    NewReviewResponse:
      description: Return object from review creation
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: string
                example: ok
              data:
                $ref: '#/components/schemas/Review'
    UserInfoResponse:
      description: User information sanitized return
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: string
                example: ok
              data:
                $ref: '#/components/schemas/User'
    SuccessMessageReturn:
      description: ''
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: string
                example: ok
              message:
                type: string
    WebAppsReturn:
      description: paginated list of web applications
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: string
                example: ok
              totalDocs:
                type: integer
                example: 50
              limit:
                type: integer
                example: 10
              page:
                type: integer
                example: 1
              totalPages:
                type: integer
                example: 5
              hasNextPage:
                type: boolean
                example: true
              nextPage:
                type: integer
                example: 2
              hasPrevPage:
                type: integer
                example: false
              prevPage:
                type: integer
                example: null
              pagingCounter:
                type: integer
                example: 1
              data:
                type: array
                items:
                  $ref: '#/components/schemas/WebApps'
    WebAppReturn:
      description: application found and returned
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: string
                example: ok
              data:
                $ref: '#/components/schemas/WebApp'
    StandardError:
      description: Standard error response
      content:
        application/json:
          schema:
            properties:
              status:
                type: string
                example: error
              message:
                type: string
  parameters:
    category:
      name: category
      in: query
      required: false
      description: category to filter by
      schema:
        type: string
      example: /api/webapp?category=news
    search:
      name: search
      in: query
      required: false
      description: return regex search of web application names
      schema:
        type: string
      example: /api/webapp?search=apple
    limit:
      name: limit
      in: query
      required: false
      description: number of web applications to return in paginated response
      schema:
        type: integer
        default: 10
        minimum: 5
        maximum: 100
      example: /api/webapp/?limit=25
    page:
      name: page
      in: query
      required: false
      description: page of paginated results to show
      schema:
        type: integer
        default: 1
        minimum: 1
      example: /api/webapp/?page=1
    AppID:
      name: id
      in: path
      schema:
        type: integer
      required: true
      description: ID of requested application
      example: /api/webapp/507f191e810c19729de860ea
    ReviewID:
      name: id
      in: path
      schema:
        type: integer
      required: true
      description: ID of requested review
      example: /api/review/507f191e810c19729de860ea
  requestBodies:
    NewWebAppBody:
      required: true
      content:
        application/json:
          schema:
            properties:
              appUrl:
                type: string
                example: 'http://news.google.com'
              appleMobileWebAppCapable:
                type: boolean
                example: 'true'
              category:
                type: string
                example: news
    NewUserBody:
      required: true
      content:
        application/json:
          schema:
            properties:
              firstName:
                type: string
                example: John
              lastName:
                type: string
                example: Doe
              email:
                type: string
                example: john@example.com
              password:
                type: string
                example: asd123qwe456
    UpdateUserBody:
      required: true
      content:
        application/json:
          schema:
            properties:
              firstName:
                type: string
                example: John
              lastName:
                type: string
                example: Doe
              email:
                type: string
                example: john@example.com
    LoginCredentials:
      required: true
      content:
        application/json:
          schema:
            properties:
              email:
                type: string
                example: jon@example.com
              password:
                type: string
                example: asd123qwe456
    NewReviewBody:
      required: true
      content:
        application/json:
          schema:
            properties:
              review:
                type: string
                example: This app could use some work
              rating:
                type: integer
                example: 3
